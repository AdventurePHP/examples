;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;  configuration file for the usermanagement module.                                               ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[Default]
; database connection key. please note, that there must be a corresponding configuration section
; within the database configuration file
ConnectionKey = "Sandbox-UMGT"

; the desired application id. by default: 1. this directive is optional.
;ApplicationID = "1"

; the desired service mode of the or mapper. by default: SESSIONSINGLETON. this directive is optional.
ServiceMode = "SINGLETON"

; the follwing directives can be used to define a custom component, that provides password hashes
; this mechanism can be used to pick another alorithm, that the default one (crypt with hardcoded and dynamic salt). please note,
; that your component must implement the PasswordHashProvider interface.
;PasswordHashProvider.Namespace = ""
;PasswordHashProvider.Class = ""

; The default hash provider since 1.14 uses also a hardcoded salt. If you do not provide one here, a default
; salt will be used. To make the hashes even more secure, you should define your own here, long and strong.
; BE CAREFUL!!!: CHANGING OR LOOSING THE SALT WILL LEAD TO USELESS HASHES IN DATABASE, IF IT ALREADY EXISTS!!!
; YOUR USERS WON'T BE ABLE TO LOGIN ANYMORE IN THIS CASE!!
; ALWAYS BACKUP YOUR SALT!!
;Salt = ""

; Prior 1.14 the hash provider was an simple md5 hasher. Since 1.14 we changed this to a more
; secure hashing algorithm, using the crypt method and dynamic and static salts.
; If you want to make your existing system more secure, you can use both providers at the same time 
; as follows. The first provider (no matter how the subsection is called) is you new more secure
; provider. The second provider is a fallback. If the new provider doesn't find a mathing hash,
; all fallback providers will be testet. If fallback finds a match, the old hash will be updated automatically
; and on the fly to the new, more secure hash in the background.
; This would be the coniguration for systems which used the default APF provider before version 1.14:
;PasswordHashProvider.Default.Namespace = "modules::usermanagement::biz::provider::crypt"
;PasswordHashProvider.Default.Class = "CryptHardcodedSaltPasswordHashProvider"
;PasswordHashProvider.Fallback.Namespace = "modules::usermanagement::biz::provider::md5"
;PasswordHashProvider.Fallback.Class = "OldMD5PasswordHashProvider"
